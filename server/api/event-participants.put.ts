import { defineEventHandler, readBody } from 'h3'
import { getDB } from '~/server/database/db'

export default defineEventHandler(async event => {
	try {
		const id = event.context.params?.id
		if (!id) {
			throw new Error('ID –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω')
		}

		const body = await readBody(event)

		if (!body || typeof body !== 'object') {
			throw new Error('–ü—É—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞')
		}

		const { status } = body

		if (!status || !['accepted', 'declined'].includes(status)) {
			throw new Error('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è')
		}

		const db = await getDB()

		const updated = await db('invitations')
			.where({ id: Number(id) }) // üëà –≤–∞–∂–Ω–æ
			.update({
				status,
				updated_at: db.fn.now(),
			})

		if (!updated) {
			throw new Error('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
		}

		return {
			status: 'success',
			message: '–°—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω',
		}
	} catch (error: any) {
		console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error.message)
		event.res.statusCode = 400
		return {
			status: 'error',
			message: error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
		}
	}
})
